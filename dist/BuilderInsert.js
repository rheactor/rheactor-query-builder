import{joinOperations as t,operation as e}from"./services/OperationService.js";import{Builder as s}from"./Builder.js";import{BuilderConflict as i}from"./BuilderConflict.js";export class BuilderInsert extends s{constructor(t,e){super(),this.onConflictBuilders=[],this.internalTable(t),this.internalColumn(...e)}values(...t){return this.valuesOperations.push(t.map(t=>e(t))),this}onConflict(t){return t instanceof i&&this.onConflictBuilders.push(t),this}onConflictIgnore(t,e){return this.onConflictBuilders.push(new i(t,e).doNothing()),this}orClause(t){return this.orClauseValue=t,this}getOperations(){let e=["INSERT "];if(void 0!==this.orClauseValue&&e.push("OR ",this.orClauseValue," "),e.push("INTO "),this.tablesOperations.length>0&&(e.push(...t(this.tablesOperations,", ",!1)," ",...t(this.columnsOperations,", ",!0)," "),this.valuesOperations.length>0&&e.push("VALUES ",...t(this.valuesOperations.flatMap(e=>[t(e,", ",!0)]),", ",!1)),this.onConflictBuilders.length))for(let t of(e.push(" "),this.onConflictBuilders))e.push(...t.getOperations());return this.generateWhereOperation(e),this.generateLimitOperation(e),this.generateOffsetOperation(e),e}}