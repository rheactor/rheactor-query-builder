import{isFalseable as e}from"./services/FalseableService.js";import{joinOperations as t,operation as s}from"./services/OperationService.js";export class Builder{conditional(e,t){return e&&t(this),this}build(){let e=[],t=new Map;for(let s of this.getOperations())"string"==typeof s?e.push(s):(t.has(s.value)||t.set(s.value,t.size+1),e.push(`?${t.get(s.value)}`));return{query:e.join("").trimEnd(),parameters:[...t.keys()]}}join(e,t,...s){return this.joins.push({type:"INNER",table:e,alias:t,conditions:s}),this}internalColumn(...e){for(let t of e)this.internalColumnAliased(t);return this}internalColumnAliased(t,i){return e(t)||this.columnsOperations.push(s({type:"IDENTIFIER",identifier:t,alias:i})),this}internalTable(...e){for(let t of e)this.internalTableAliased(t);return this}internalTableAliased(t,i){return e(t)||this.tablesOperations.push(s({type:"IDENTIFIER",identifier:t,alias:i})),this}internalWhere(...t){for(let s of t)e(s)||this.wheresExpressions.push(s);return this}internalLimit(t,s){return this.limitExpression="number"==typeof t?{type:"STATIC",argument:t}:e(t)?void 0:t,arguments.length>=2&&this.internalOffset(s),this}internalOffset(t){return this.offsetExpression="number"==typeof t?0===t?void 0:{type:"STATIC",argument:t}:e(t)?void 0:t,this}generateFromOperation(e){this.tablesOperations.length>0&&e.push("FROM ",...t(this.tablesOperations,", ",!1)," ")}generateJoinOperations(e){for(let t of this.joins)e.push(`${t.type} JOIN `,...s({type:"IDENTIFIER",identifier:t.table,alias:t.alias})," "),t.conditions.length>0&&e.push("ON ",...s({type:"AND",expressions:t.conditions})," ")}generateSetOperation(e){this.setsOperations.length>0&&e.push("SET ",...t(this.setsOperations,", ",!1)," ")}generateWhereOperation(e){if(this.wheresExpressions.length>0){let t=s({type:"AND",expressions:this.wheresExpressions,includeParens:!1});t.length>0&&e.push("WHERE ",...t," ")}}generateLimitOperation(e){void 0!==this.limitExpression&&e.push("LIMIT ",...s(this.limitExpression)," ")}generateOffsetOperation(e){void 0!==this.offsetExpression&&e.push("OFFSET ",...s(this.offsetExpression)," ")}constructor(){this.columnsOperations=[],this.tablesOperations=[],this.setsOperations=[],this.valuesOperations=[],this.wheresExpressions=[],this.joins=[]}}