import{BuilderCase as e}from"./BuilderCase.js";import{BuilderDelete as t}from"./BuilderDelete.js";import{BuilderInsert as p}from"./BuilderInsert.js";import{BuilderSelect as l}from"./BuilderSelect.js";import{BuilderUpdate as o}from"./BuilderUpdate.js";import{call as s,customCall as r}from"./supports/SqliteFunctions.js";let n={and:(...e)=>({type:"AND",expressions:e}),between:(e,t,p)=>({type:"BETWEEN",identifier:e,from:t,to:p}),call:s,case:t=>new e(t),cast:(e,t)=>({type:"CAST",expression:e,cast:t}),collate:(e,t="BINARY")=>({type:"COLLATE",expression:e,collate:t}),customCall:r,delete:e=>new t(e),eq:(e,t)=>({type:"=",sideA:e,sideB:t}),exists:e=>({type:"EXISTS",builder:e}),gt:(e,t)=>({type:">",sideA:e,sideB:t}),gte:(e,t)=>({type:">=",sideA:e,sideB:t}),isNull:e=>({type:"IS NULL",identifier:e}),insert:(e,t)=>new p(e,t),isNotNull:e=>n.not({type:"IS NULL",identifier:e}),jsonValue:(e,t=!1)=>t&&null===e?{type:"VALUE",argument:e}:{type:"JSON",argument:e},jsonStaticValue:(e,t=!1)=>({type:"STATIC",argument:t&&null===e?null:JSON.stringify(e)}),lt:(e,t)=>({type:"<",sideA:e,sideB:t}),lte:(e,t)=>({type:"<=",sideA:e,sideB:t}),neq:(e,t)=>({type:"!=",sideA:e,sideB:t}),not:e=>({type:"NOT",expression:e}),notBetween:(e,t,p)=>n.not({type:"BETWEEN",identifier:e,from:t,to:p}),or:(...e)=>({type:"OR",expressions:e}),raw:e=>({type:"RAW",expression:e}),select:(...e)=>new l().select(...e),staticValue:e=>({type:"STATIC",argument:e}),update:e=>new o(e),value:e=>({type:"VALUE",argument:e}),op:(e,t,p)=>"**"===e?n.call("POW",t,p):{type:"OPERATOR",operator:e,expressionA:t,expressionB:p},sum:(e,t)=>n.op("+",e,t),sub:(e,t)=>n.op("-",e,t),mul:(e,t)=>n.op("*",e,t),div:(e,t)=>n.op("/",e,t),mod:(e,t)=>n.op("%",e,t),pow:(e,t)=>n.call("POW",e,t)};export default n;