import{Builder as e}from"./Builder.js";let t={and:(...e)=>({type:"AND",expressions:e}),between:(e,t,p)=>({type:"BETWEEN",identifier:e,from:t,to:p}),call:(e,...t)=>({type:"CALL",identifier:e,functionArguments:t}),cast:(e,t)=>({type:"CAST",expression:e,cast:t}),collate:(e,t="BINARY")=>({type:"COLLATE",expression:e,collate:t}),delete:()=>new e("delete"),eq:(e,t)=>({type:"=",sideA:e,sideB:t}),exists:e=>({type:"EXISTS",builder:e}),gt:(e,t)=>({type:">",sideA:e,sideB:t}),gte:(e,t)=>({type:">=",sideA:e,sideB:t}),isNull:e=>({type:"IS NULL",identifier:e}),insert:(...t)=>new e("insert").select(...t),isNotNull:e=>t.not({type:"IS NULL",identifier:e}),jsonValue:e=>({type:"JSON",argument:e}),lt:(e,t)=>({type:"<",sideA:e,sideB:t}),lte:(e,t)=>({type:"<=",sideA:e,sideB:t}),neq:(e,t)=>({type:"!=",sideA:e,sideB:t}),not:e=>({type:"NOT",expression:e}),notBetween:(e,p,l)=>t.not({type:"BETWEEN",identifier:e,from:p,to:l}),or:(...e)=>({type:"OR",expressions:e}),raw:e=>({type:"RAW",expression:e}),select:(...t)=>new e("select").select(...t),staticValue:e=>({type:"STATIC",argument:e}),update:t=>new e("update").from(t),value:e=>({type:"VALUE",argument:e})};export default t;