import{BuilderDelete as e}from"./BuilderDelete.js";import{BuilderInsert as t}from"./BuilderInsert.js";import{BuilderSelect as p}from"./BuilderSelect.js";import{BuilderUpdate as l}from"./BuilderUpdate.js";let y={and:(...e)=>({type:"AND",expressions:e}),between:(e,t,p)=>({type:"BETWEEN",identifier:e,from:t,to:p}),call:(e,...t)=>({type:"CALL",identifier:e,functionArguments:t}),cast:(e,t)=>({type:"CAST",expression:e,cast:t}),collate:(e,t="BINARY")=>({type:"COLLATE",expression:e,collate:t}),delete:t=>new e(t),eq:(e,t)=>({type:"=",sideA:e,sideB:t}),exists:e=>({type:"EXISTS",builder:e}),gt:(e,t)=>({type:">",sideA:e,sideB:t}),gte:(e,t)=>({type:">=",sideA:e,sideB:t}),isNull:e=>({type:"IS NULL",identifier:e}),insert:(e,p)=>new t(e,p),isNotNull:e=>y.not({type:"IS NULL",identifier:e}),jsonValue:e=>({type:"JSON",argument:e}),lt:(e,t)=>({type:"<",sideA:e,sideB:t}),lte:(e,t)=>({type:"<=",sideA:e,sideB:t}),neq:(e,t)=>({type:"!=",sideA:e,sideB:t}),not:e=>({type:"NOT",expression:e}),notBetween:(e,t,p)=>y.not({type:"BETWEEN",identifier:e,from:t,to:p}),or:(...e)=>({type:"OR",expressions:e}),raw:e=>({type:"RAW",expression:e}),select:(...e)=>new p().select(...e),staticValue:e=>({type:"STATIC",argument:e}),update:e=>new l(e),value:e=>({type:"VALUE",argument:e})};export default y;